Django Basic Notes

Django Overview

• Python framework for web development.

• Follows MVT (Model-View-Template) pattern.

• Default database: SQLite3.

• Supports MySQL and PostgreSQL.

• Default port: 8000.

MVT Pattern

• Model: Handles database.

• View: Contains logic.

• Template: Manages frontend (using DTL).

Databases

• SQLite3 (default) for development.

• Supports MySQL, PostgreSQL, Oracle.

• Configure in settings.py using database credentials.

Microservices

• Flask: Lightweight, for small applications.

• FastAPI: Fast and asynchronous API development.

• CherryPy: Minimalistic web framework.

MVT vs MVC

• MVT (Model-View-Template) - Django follows this pattern. 

o Model: Handles database (data storage).

o View: Contains logic to process data.

o Template: Displays the data using HTML.

• MVC (Model-View-Controller) - Used in other frameworks like Flask. 

o Model: Manages data and database.

o View: Displays data using UI.

o Controller: Handles user input and business logic.

In Django, the Controller part is handled by the framework itself (Django’s built-in functions).

Django ORM vs SQL

• Django ORM (Object Relational Mapping)

o Python-based way to interact with the database.

o Example: 

User.objects.create(name='John', age=25)

• SQL (Structured Query Language)

o Direct query to the database.

o Example: 

INSERT INTO User (name, age) VALUES ('John', 25);

ORM is easier to write, maintain, and reduces errors compared to raw SQL.
Django vs Flask vs FastAPI

• Django: Best for large projects with pre-built features (Admin Panel, ORM).

• Flask: Lightweight and flexible, ideal for small projects or APIs.

• FastAPI: Best for real-time applications with excellent API support and speed.

Virtual Environment Setup (Python)

A virtual environment is a self-contained directory that contains Python installations and 

packages, allowing you to manage dependencies for different projects.

Commands to Create and Activate Virtual Environment

1. Create Virtual Environment

py -m venv env

o py → Runs Python

o -m venv → Module to create a virtual environment

o env → Environment folder name

2. Navigate to Environment Folder

cd env

cd Scripts

3. Activate Virtual Environment

./activate

o (env) → Indicates the virtual environment is active.

Fixing Execution Policy Issues

If you face issues activating the environment due to restricted execution policies:

1. Check Execution Policy (in Windows PowerShell run as Administrator)

get-executionpolicy

o It may show Restricted.

2. Change Execution Policy (Run as Administrator in Windows PowerShell)

set-executionpolicy unrestricted

o Choose Y to confirm.

Folder Structure of Virtual Environment

• env/ → Root folder for environment 

o Include/ → C/C++ packages

o Lib/ → Python packages

o Scripts/ → Executable files (activate)

o pyvenv.cfg → Configuration file

Interview Tips - Common Questions

1. What is a Python virtual environment?

o A virtual environment is a self-contained Python setup for project-specific 

dependencies.

2. Why use a virtual environment instead of installing globally?

o It prevents package conflicts, ensures project isolation, and avoids system-level 

changes.
Django Project Setup and Notes

Prerequisites 

 Python and Pip (Python's package manager) must be installed.

Required Packages

• asgiref: For asynchronous support (ASGI - Asynchronous Server Gateway Interface)

• sqlparse: For SQL query parsing

• tzdata: Provides timezone data

• Django: The main framework for web development

Installation Steps

Create a Virtual Environment

py -m venv env

Activate the Virtual Environment

.\env\Scripts\

./activate

cd ../../

Install Django (in Main Folder)

pip install django

Verify Installation

django-admin --version

Create a Django Project

Start a New Project

django-admin startproject project_name

Navigate to the Project Directory

cd project_name

How to Run Django

• Use the following command to run the server on port 8000:

python manage.py runserver

• Access the project at http://127.0.0.1:8000.

• Ctrl + C to stop the server.

Directory Structure After Creation project_name 

project_name/ (Outer Project)

│

├── manage.py # Command-line utility for managing the project
├── project_name/ # Project settings and configurations

│ ├── __init__.py # Marks this directory as a Python package

│ ├── asgi.py # Entry point for ASGI applications

│ ├── settings.py # Project settings

│ ├── urls.py # URL routing

│ ├── wsgi.py # Entry point for WSGI applications

├── db.sqlite3 # Default Database

Additional Notes

• cd ../ → Move to the previous directory

• cd ./ → Remain in the current directory

• Dependencies like asgiref, sqlparse, and tzdata are installed automatically with Django.

Managing Virtual Environment

• Always run .\activate from the Scripts directory to activate the virtual environment.

• All installed packages are available in lib\site-packages.

Update Pip (optional)

python.exe -m pip install --upgrade pip
Django Project Structure - Interview Notes

Outer Project Structure

•	manage.py

o	Acts as the heart or brain of a Django project.

o	Used as a utility tool for administrative operations (e.g., running the server, migrations).

o	Do not modify it.

•	db.sqlite3 (Default Database)

o	SQLite is the default relational database in Django.

o	Data is stored in a tabular format (rows and columns).

o	Relational Database: Prevents memory wastage by storing structured data efficiently.

o	Non-Relational Database: Uses key-value pair storage (e.g., NoSQL), leading to memory wastage if columns are added without data.

o	Row: Referred to as an Instance in Django ORM.

 

Inner Project Folder

Contains essential files and configurations to manage the application.

•	__init__.py

o	An empty file that makes the directory a Python package.

•	asgi.py (Asynchronous Server Gateway Interface)

o	Handles multiple requests at a time (asynchronous).

o	Suitable for real-time applications like: 

Live Streaming, Trading Platforms, WebSockets, Live Cricket Score Updates.

•	wsgi.py (Web Server Gateway Interface)

o	Handles single requests at a time (synchronously).

o	Suitable for normal websites and applications.

o	Django supports WSGI by default.

•	settings.py

o	The core configuration file for the project.

o	Manages: 

	Port management

	Application settings

	Database configurations

	Middleware and Installed Apps

•	urls.py

o	Handles URL routing.

o	Maps URLs to views.

 

Django Project Essentials – Quick Notes

📂 File Location: settings.py

📌 BASE_DIR

•	BASE_DIR represents the root directory of your Django project.

•	It helps in defining paths for templates, static files, database, and more.

⚡ Secret Key

•	SECRET_KEY = 'django-insecure-79zs...'

•	Used for encryption (cookies, CSRF tokens, sessions).

•	❌ Never expose in production! Use .env file or environment variables.

🐞 Debug Mode

•	DEBUG = True → Shows detailed errors (for development).

•	DEBUG = False → Hides errors in production (for security).

🌐 Allowed Hosts

•	ALLOWED_HOSTS = [] → Defines which domains can access the app.

•	Example for production: ['example.com', 'www.example.com'].

 

📂 File Location: settings.py

📦 Installed Apps

•	INSTALLED_APPS → Lists all built-in and custom Django apps.

•	Example:

python

CopyEdit

INSTALLED_APPS = [

    'django.contrib.admin',   # Admin Panel

    'django.contrib.auth',    # Authentication System

    'myapp',                  # Custom App

]

🧱 Middleware

•	Middleware processes requests before they reach views.

•	Example: CsrfViewMiddleware (prevents CSRF attacks).

 

📂 File Location: project/urls.py

📌 Root URL Configuration

•	ROOT_URLCONF = 'project.urls' → Points to the main urls.py.

•	Example URL mapping:

python

CopyEdit

from django.urls import path

from myapp import views



urlpatterns = [

    path('', views.home, name='home'),

    path('about/', views.about, name='about'),

]

 

📂 File Location: settings.py

🎭 Templates

•	Stores HTML files for rendering the frontend.

•	Example configuration:

python

CopyEdit

TEMPLATES = [

    {

        'BACKEND': 'django.template.backends.django.DjangoTemplates',

        'DIRS': ['templates'],  # Custom templates directory

        'APP_DIRS': True,

    },

]

 

📂 File Location: wsgi.py & asgi.py

🖥️ WSGI Application

•	wsgi.py → Used for deploying Django apps with WSGI servers (Gunicorn, uWSGI).

⚡ ASGI Application

•	asgi.py → Supports real-time features (WebSockets, chat, live updates).

 

📂 File Location: settings.py

🗄️ Database Configuration

•	Default: SQLite (db.sqlite3).

•	Can switch to PostgreSQL, MySQL, etc.

python

CopyEdit

DATABASES = {

    'default': {

        'ENGINE': 'django.db.backends.sqlite3',

        'NAME': BASE_DIR / 'db.sqlite3',

    }

}

🔒 Password Validators

•	Ensures strong passwords (length, no common words, complexity).

🌍 Internationalization & Time Zone

•	LANGUAGE_CODE = 'en-us', TIME_ZONE = 'UTC'.

🖼️ Static Files

•	STATIC_URL = 'static/' → Stores CSS, JS, and images.

🆔 Default Primary Key Field

•	DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField' → Default primary key type.

 

📂 File Location: manage.py

🧑‍💻 manage.py

•	Runs Django commands like:

bash

CopyEdit

python manage.py runserver      # Start server

python manage.py migrate        # Apply database migrations

python manage.py startapp myapp # Create a new app

 

Final Revision Summary

✔ manage.py → Runs Django commands.

✔ wsgi.py → Deploys app with WSGI.

✔ asgi.py → Supports real-time features.

✔ urls.py → Handles URL routing.

✔ settings.py → Configures database, security, static files, and middleware.

💡 Tip: Set DEBUG = False in production for security. 🚀

 

✅ Summary for Revision

o	BASE_DIR: Project path management.

o	SECRET_KEY: Used for security, keep it private.

o	DEBUG: Enables detailed error reports in development.

o	ALLOWED_HOSTS: Controls which domains can access your site.

o	INSTALLED_APPS: Pre-installed and custom apps.

o	MIDDLEWARE: Security and functionality management.

o	ROOT_URLCONF: Directs to URL routing file.

o	TEMPLATES: Manages HTML templates for frontend.

o	WSGI_APPLICATION: Interface for deploying the app.

o	DATABASES: Configures database using SQLite by default.

o	AUTH_PASSWORD_VALIDATORS: Ensures strong passwords.

o	LANGUAGE_CODE & TIME_ZONE: Controls language and time settings.

o	STATIC_URL: Path for serving static files.

Django Project and App Structure Notes

Creating an App

Start a New App:

python manage.py startapp app_name

App Structure:

app_name/

├── __init__.py

├── admin.py        # Manage data via Admin Panel

├── apps.py         # App configuration

├── migrations/     # Tracks database changes

├── models.py       # Database Models (ORM)

├── tests.py        # Testing application

├── views.py        # Logic for handling requests

Explanation:

admin.py → Register models to view in Admin Panel.

apps.py → Configures app settings.

migrations/ → Contains files that record model changes (e.g., 0001_initial.py).

models.py → Define database tables using ORM.

tests.py → Write unit tests.

views.py → Contains functions or class-based views for request handling.

 

Migrations

ORM (Object-Relational Mapping)

Converts Python code (models) into SQL queries.

Communicates with the database using Python objects.

Steps for Migrations:

Create Migrations:

python manage.py makemigrations

Converts models to SQL queries.

Apply Migrations:

python manage.py migrate

Applies the SQL queries to the database.

Example Workflow:

python manage.py makemigrations   # Generate migration files

python manage.py migrate           # Apply migrations to database

Tip: Use SQLite Viewer Extension in VS Code to view database content.

 

Importing and Using

In Admin Panel

First, register the model in admin.py:

from django.contrib import admin

from .models import ModelName



admin.site.register(ModelName)

Then run:

python manage.py createsuperuser

python manage.py runserver

Access the Admin Panel at http://127.0.0.1:8000/admin

In Views

Example function in views.py:

from django.http import HttpResponse



def home(request):

    return HttpResponse("Hello, Django!")

Add it to urls.py:

from django.urls import path

from .views import home



urlpatterns = [

    path('', home),

]

 

Quick Summary for Interview Prep:

Command	Description

python manage.py startproject project_name	Create a new Django project

python manage.py startapp app_name	Create a new app within the project

python manage.py runserver	Run the development server

python manage.py makemigrations	Convert model changes into SQL queries

python manage.py migrate	Apply SQL queries to the database

python manage.py createsuperuser	Create an admin user

python manage.py shell	Open an interactive Python shell with project settings loaded

 

Port Number Management in Django

Static Port Change:

You can change the port statically by modifying the server run command in the following path:

env/lib/site-packages/django/core/management/commands/

1.	open 40 line approx.

2.	Locate the line defining the default port:

3.	default_port = '8000'

4.	Change it to your desired port:

5.	default_port = '8080'  # Example static port

6.	Save the file and run the server using:

7.	python manage.py runserver

Dynamic Port Management:

•	You can specify a different port dynamically using the runserver command:

python manage.py runserver 8002

•	This will start the server on 127.0.0.1:8002.

 

Basic Concepts

•	Create Project Environment: Virtual environment created using venv

•	Structure:

o	env/lib/site-packages (includes Django, Core Packages)

o	Management commands with manage.py

 

Dynamic Management with manage.py

•	manage.py runs the server on port 8000 by default or on the specified port.

•	Multiple servers can run on different ports.

•	Entry Point for commands: manage.py

Server Concept:

•	WSGI (Web Server Gateway Interface): Interface for communication between web servers and Python applications.

•	Debug using print() in:

o	wsgi.py

o	manage.py

o	settings.py

 

Create a Project and App

•	Create Project:

•	django-admin startproject project_name

•	Create App:

•	python manage.py startapp app_name

 

 Virtual Environment Management

1.	Create Environment:

2.	python -m venv env

3.	Activate Environment:

4.	cd env/Scripts/

5.	activate

6.	Install Django:

7.	pip install django

 

Run Server

•	Start Server:

•	python manage.py runserver

•	Check Port (Default: 127.0.0.1:8000)

•	If Red Color Error -> Port Conflict

 

Database Management

•	Migrate Changes:

•	python manage.py migrate

•	Make Migrations (Reflect App in DB):

•	python manage.py makemigrations app_name


Django MVT Pattern

•	MVT stands for Model, View, and Template.

•	Model-> Database Structure, Views->Logic, Templates->DTL(for html).

•	It is a design pattern used by Django for web application development.

Components of MVT

1.	Model (Python):

o	Manages the database.

o	Represents data in a structured format.

o	Example: Tables, fields, and relationships.

2.	View (Python):

o	Contains business logic.

o	Handles HTTP requests and responses.

o	Interacts with models and renders templates.

3.	Template (HTML):

o	Defines the structure and layout of the web pages.

o	Uses Django Template Language (DTL) for dynamic content.

 

Basic Project Structure in Django

•	Project files include:

o	settings.py: Configures the project.

o	urls.py: Maps URLs to views.

o	views.py: Contains view functions.

o	templates/: Stores HTML files.

 

Django Workflow Example

1.	Create a Project

	django-admin startproject project_name

2.	Create an App

python manage.py startapp app_name

3.	Add App to Installed Apps

o	Go to settings.py

o	Add 'app_name', to INSTALLED_APPS

4.	Define URL Patterns

o	urls.py in project folder:

from django.urls import path

from app_name import views



urlpatterns = [

    path('', views.home, name='home'),

]

5.	Create a View

o	views.py in the app folder:

python

CopyEdit

from django.shortcuts import render



def home(request):

    return render(request, 'home.html')

6.	Create Templates

o	In your app folder:

app_name/

└── templates/

    └── home.html

o	Example home.html:

<h1>Welcome to My Website!</h1>

 



✅ Form Attributes

•	action → URL to send form data

•	method → GET or POST request

•	enctype → Encode data (e.g., multipart/form-data for file uploads)

•	target → Open result in new tab or same tab

•	autocomplete → Enable/disable autofill (on/off)

•	novalidate → Disable form validation

•	name → Form identifier

 

✅ Table Attributes

•	border → Table border

•	cellpadding → Space inside cells

•	cellspacing → Space between cells

•	width → Table width

•	height → Table height

•	align → Align table (left, right, center)

•	bgcolor → Background color

•	colspan → Merge columns

•	rowspan → Merge rows

✅ **Attributes of <thead>, <tbody> and <tfoot>

•	These elements don’t have many special attributes. They mainly help in organizing table content.

•	align → Align content (left, right, center)

•	valign → Vertical alignment (top, middle, bottom)

•	bgcolor → Background color (Not recommended, use CSS instead)

 

✅ Attributes of <th> (Table Header) and <td> (Table Data)

These two elements share similar attributes.

•	colspan → Merges columns ("column span")

o	Example: <td colspan="2"> Merges 2 columns

•	rowspan → Merges rows ("row span")

o	Example: <td rowspan="3"> Merges 3 rows

•	align → Horizontal alignment (left, right, center)

•	valign → Vertical alignment (top, middle, bottom)

•	bgcolor → Background color

•	width → Set column width

•	height → Set row height

•	abbr → Abbreviation for accessibility (e.g., screen readers)

•	scope → Defines which cells a header applies to (col, row, colgroup, rowgroup)

o	Example: <th scope="col"> for column header

 

✅ Attributes of <tr> (Table Row)

•	align → Align row content (left, right, center)

•	valign → Vertical alignment (top, middle, bottom)

•	bgcolor → Row background color

•	height → Row height



 

✅ Image Attributes

•	src → Image URL

•	alt → Alternative text (if image fails to load)

•	width → Image width

•	height → Image height

•	title → Tooltip on hover

•	loading → Lazy or eager loading

•	crossorigin → For external images (anonymous or use-credentials)

 

✅ Anchor (Link) Attributes

•	href → URL to navigate

•	target → Open link in new tab (_blank) or same tab (_self)

•	title → Tooltip on hover

•	rel → Relationship (e.g., nofollow, noopener)

•	download → Download file instead of opening

•	type → Specify link type (e.g., text/html)

 

✅ Input Attributes

•	type → Text, password, email, number, file, etc.

•	placeholder → Hint inside input field

•	value → Default value

•	name → Input field identifier

•	required → Makes field mandatory

•	disabled → Disable input

•	readonly → Make input non-editable

•	maxlength → Limit character count

•	min / max → Set number or date range

•	pattern → Regex for validation

•	autocomplete → Enable/disable autofill

•	checked → Pre-select checkboxes or radio buttons


1.	Request-Response Cycle in Django (MVT Pattern)



                    Request

                       ↓

               +------------------+

               |      Server       |

               |    (wsgi.py)     |

               +------------------+

                       ↓

               +------------------+

               |    Settings.py    |  <--- Configuration (Database, Middleware)

               +------------------+

                       ↓

               +------------------+

               |      Urls.py      |  <--- URL Routing

               +------------------+

                       ↓

               +------------------+

               |     Views.py      |  <--- Logic Processing

               +------------------+

                  /            \

                 /              \

        +------------+     +--------------+

        |  Models.py  |     |  Templates   |  <--- HTML Rendering

        +------------+     +--------------+

                 \              /

                  \            /

               +------------------+

               |     Views.py      |  <--- Renders Data

               +------------------+

                       ↑

               +------------------+

               |      Urls.py      |

               +------------------+

                       ↑

               +------------------+

               |    Settings.py    |

               +------------------+

                       ↑

               +------------------+

               |      Server       |

               +------------------+

                       ↑

                    Response













Explanation:

1.	Request: A user sends a request to the server (e.g., visiting a URL).

2.	Server (wsgi.py): Handles the request and passes it to the application.

3.	Settings.py: Manages configurations like databases, middleware, and installed apps.

4.	Urls.py: Matches the request URL to the appropriate view using URL routing.

5.	Views.py: Processes data using business logic, often interacting with models.

6.	Models.py: Represents the database and handles data using Django ORM.

7.	Templates: HTML files render the data to display it to the user.

8.	Response Path: The response is passed back in reverse order through Views, URLs, Settings, and finally returned by the Server.

This reverse path represents the final rendering and response delivery in the MVT (Model-View-Template) pattern in Django.





2. Basic Project Structure and Setup

1.	Create Virtual Environment:

python -m venv env

2.	Activate Environment:

cd env/Scripts

.\activate

cd ../../

3.	Install Django:

pip install django

4.	Start Project:

django-admin startproject project

cd project

5.	Create Apps:

python manage.py startapp app1

python manage.py startapp app2

6.	Run Server:

python manage.py runserver



3. App Configuration and URL Mapping

•	INSTALLED_APPS → Register your app in project/settings.py:

INSTALLED_APPS = [

	  ‘..previous’

    'app1',

    'app2',

]

•	project/urls.py Configuration:

from app1 import views



urlpatterns = [

    path('app1/', views.app1, name='app1'),

]

•	app1/views.py (Basic View Function):

def app1(request):

    return render(request, ‘app1.html’)

•	 make : app1/templates/app1.html.

•	Run on Browser:

127.0.0.1:8000/app1/



 

Response Types in Django(in views.py):

1.	render()

o	Purpose: Renders an HTML template and sends it as a response.

o	Import: from django.shortcuts import render

o	Use Case: When you want to show an HTML page with dynamic data.

o	Example:

o	from django.shortcuts import render

o	def home(request):

o	    context = {'name': 'John'}

    return render(request, 'home.html', context)

2.	redirect()

o	Purpose: Redirects the user to a different URL.

o	Import: from django.shortcuts import redirect

o	Use Case: After form submission or login/logout.

o	Example:

o	from django.shortcuts import redirect

o	

o	def go_to_home(request):

    return redirect('/home/')	# (or paste url of page(like google, insta etc)

3.	HttpResponse

o	Purpose: Returns plain text, HTML, or any content as a response.

o	Import: from django.http import HttpResponse

o	Use Case: Simple responses like debugging or APIs without templates.

o	Example:

o	from django.http import HttpResponse

o	

o	def hello(request):

    return HttpResponse('Hello, World!')

4.	JsonResponse

o	Purpose: Returns JSON data as a response, often used for APIs.

o	Import: from django.http import JsonResponse

o	Use Case: For API responses or AJAX requests.

o	Example:

o	from django.http import JsonResponse

o	

o	def api_data(request):

o	   # data = {'name': 'John', 'age': 30}

    data= {'name': True, 'age':False, 'quali':None}

    return JsonResponse(data)



json data shows: {"name": true, "age": false, "quali": null}



Summary:

•	render() → URL to HTML Page 

•	redirect() → URL to URL

•	HttpResponse() → Text Content Response

•	JsonResponse() → JSON Data Response

These are essential response types in Django, and understanding their purpose will help in building both web applications and APIs effectively.


Python Dictionary vs JSON Data

Key Differences

Aspect	Python Dictionary	JSON Data

Quotes	Single, Double, Triple	Double Only

Boolean Representation	True, False	true, false

Null Representation	None	null

Data Type	dict	str (JSON String)

Example Use Case	Python Backend Operations	API Communication





Django Project Structure( By Neeraj Sir)



├── env/                    # Virtual Environment (Isolated Python environment)

│   ├── bin/                # Executable files (Linux/Mac)

│   ├── Scripts/            # Executable files (Windows)

│   ├── lib/                # Libraries installed via pip

│   ├── include/            # Header files for C extensions

│   └── pyvenv.cfg          # Virtual environment configuration file

│

├── project/                # Parent Project Folder

│   ├── app1/               # Application Directory

│   │   ├── __init__.py     # Initializes app1 as a package

│   │   ├── admin.py        # Configuration for Django Admin Panel

│   │   ├── apps.py         # App configuration settings

│   │   ├── models.py       # Defines database models for app1

│   │   ├── views.py        # Handles HTTP requests and responses

│   │   ├── urls.py         # App-specific URL routing

│   │   ├── tests.py        # Unit tests for app1

│   │   ├── templates/      # HTML Templates for rendering views

│   │   │   └── app1/       # App-specific template directory

│   │   │       └── index.html  # Example HTML template

│   │   ├── static/         # Static Files (CSS, JS, Images)

│   │   │   ├── css/        # CSS Files

│   │   │   │   └── style.css  # Example CSS file

│   │   │   ├── js/         # JavaScript Files

│   │   │   │   └── script.js  # Example JS file

│   │   │   └── images/     # Image Files

│   │   ├── migrations/     # Database schema changes for app1

│   │   │   ├── __init__.py

│   │   └── __pycache__/    # Compiled Python files for app1

│

│   ├── project/            # Project Configuration Directory

│   │   ├── __init__.py     # Marks project as a Python package

│   │   ├── asgi.py         # ASGI configuration for asynchronous support

│   │   ├── settings.py     # Project-wide configurations (Database, Middleware, etc.)

│   │   ├── urls.py         # Main URL routing (Maps URLs to views)

│   │   ├── wsgi.py         # WSGI configuration for deploying using traditional servers

│   │   └── __pycache__/    # Compiled Python files for faster execution

│

│   ├── db.sqlite3           # SQLite3 Database (Default development database)

│   └── manage.py            # Django Management Script (Handles migrations, running server, etc.)









Django Command Line Lifecycle (Step-by-Step)

1. Install Django

pip install django

2. Create a New Django Project

django-admin startproject project_name

cd project_name

3. Run the Development Server

python manage.py runserver

(Default: http://127.0.0.1:8000/)

4. Create a Django App

python manage.py startapp app_name

5. Register the App in settings.py

Open settings.py and add the app to INSTALLED_APPS:

INSTALLED_APPS = [

    'app_name',

]

6. Create Database Migrations

python manage.py makemigrations

python manage.py migrate

makemigrations → Creates migration files for model changes.

migrate → Applies migrations to the database.

By Google:

7. Create a Superuser (For Admin Panel)

python manage.py createsuperuser

Enter username, email, and password.

8. Run the Django Shell (For Testing)

sh

python manage.py shell

You can interact with models in Python.

9. Collect Static Files (For Deployment)

python manage.py collectstatic

10. Deploy the Project (Example: PythonAnywhere)

•	Upload files to a server.

•	Set DEBUG = False in settings.py.

•	Configure ALLOWED_HOSTS.

•	Run migrations on the server.



Note: Always use internet for pip file only in Django.

Django Request-Response Lifecycle

1.	Request → Sent by the user (browser/client).

2.	WSGI (wsgi.py) → Handles the request and passes it to Django.

3.	Settings (settings.py) → Configures the project (DB, debug, installed apps, etc.).

4.	URLs (project/urls.py) → Matches the request URL to a view function/class.

5.	Views (app/views.py) → Processes logic and interacts with:

o	Models (models.py) → Handles database operations.

o	Templates (templates/) → Renders HTML response.

6.	Response → Sent back to the user via views → urls → settings → wsgi.



MVT Pattern in Django

•	Models (models.py) → Database structure.

•	Views (views.py) → Business logic.

•	Templates (templates/) → Frontend (HTML).

Note: Logic is handled in views.py.



Debug Mode (settings.py)

•	DEBUG = True → Shows errors (for development).

•	DEBUG = False → Hides errors (for production).



Development & Deployment

•	Development: Local system (Run python manage.py runserver).

•	Deployment: Use hosting services like PythonAnywhere, set DEBUG = False.



Django Installation Example

pip install django

pip freeze  # To check installed packages

Example Output:

Successfully installed asgiref-3.8.1 django-5.1.7 sqlparse-0.5.3 tzdata-2025.2



URLs in Django (urls.py)

from django.urls import path

from app.views import function_name  # Import views



urlpatterns = [

    path('route/', function_name, name='optional_name'),

]



Format: path('route/', function_name_or_class, template_related).



	



Django Dictionary Format Notes 

1. Form Data Submission (POST Method)

# In an HTML form, always use POST method for submission.

# If GET method is used, data will be sent in the URL, which is not secure.



<form method="post">

    <input type="text" name="name">

    <button type="submit">Submit</button>

</form>

Why use POST?

•	POST method does not expose data in the URL.

•	GET method appends data to the URL, which is insecure for sensitive information.

 

2. Rendering Dynamic Data in Django

a. Passing Data as Dictionary (Key-Value Pair)

Django uses key-value pairs (dictionaries) for passing data from the backend (views) to the frontend (templates).

•	Dictionaries ({key: value}) are easy to manage:

o	key is the variable name used in the template.

o	value is the actual data being passed.

def home(request):

    data = {'name': 'Himanshu', 'age': 22, 'quali': 'MTech'}

    return render(request, 'home.html', data)

Template (home.html):

<h1>{{ name }}</h1>

<h2>{{ age }}</h2>

<h3>{{ quali }}</h3>



Django automatically replaces {{ name }} with "Himanshu" because it matches the key in the dictionary.

Django uses double curly braces ({{ }}) for variable interpolation, meaning it replaces the placeholder with actual values from the backend.

Context in Django

🔹 Context is a dictionary that passes data from views to templates.

•	The context dictionary is passed inside the render() function.

	Eg., return render(request, 'home.html', context)

•	Data(context) is then accessed in the Django template using {{ key }}.

✅ Why Context?

•	Context connects Django views and templates.

•	It allows dynamic content instead of hardcoding values in HTML.



 

b. Sending Multiple Data Items (List of Dictionaries)

def home(request):

    data = [

        {'name': 'Himanshu', 'age': 22, 'quali': 'BTech'},

        {'name': 'Vijay', 'age': 23, 'quali': 'BTech'},

        {'name': 'Jatin', 'age': 24, 'quali': 'MA'}

    ]

    return render(request, 'home.html', {'key1': data})

Template:

<h5>{{ key1 }}</h5>  <!-- Displays the entire list -->



How to Loop Through the List in HTML

{% for person in key1 %}

    <p>Name: {{ person.name }}, Age: {{ person.age }}, Qualification: {{ person.quali }}</p>

{% endfor %}



What is {% for person in key1 %} {% endfor %}?

This is a Django template tag used for looping over a list.

✅ Why Use This Loop?

•	If key1 contains multiple dictionaries (list of people), looping is required to display each person's details.

•	Without {% for %} {% endfor %}, only one value could be displayed at a time.



 

3. Passing Multiple Dictionaries

def cart(request):

    data = [{'name': 'Himanshu', 'age': 22}]

    user = {'city': 'Rewa', 'name': 'Vijay'}

    return render(request, 'home.html', {'key2': data, 'key3': user})

Template:

<h5>{{ key2 }}</h5>  <!-- List data -->

<h5>{{ key3 }}</h5>  <!-- Dictionary data -->

<h5>{{ key3.name }}</h5>  <!-- Access specific dictionary key -->

Breakdown:

•	key2 contains a list of dictionaries.

•	key3 contains a single dictionary { 'city': 'Rewa', 'name': 'Vijay' }.

•	To access name from key3, use {{ key3.name }}.

 

4. Cookies and Sessions (Client & Server Data Storage)

a. Cookies (Stored in Browser)

def set_cookie(request):

    response = HttpResponse("Cookie Set")

    response.set_cookie('username', 'Himanshu', max_age=3600)  # Expires in 1 hour

    return response

def get_cookie(request):

    username = request.COOKIES.get('username', 'Guest')

    return HttpResponse(f'Hello, {username}')

Cookies are stored on the client-side and sent with each request.

b. Sessions (Stored in Server)

def set_session(request):

    request.session['user'] = 'Himanshu'

    return HttpResponse("Session Set")

def get_session(request):

    user = request.session.get('user', 'Guest')

    return HttpResponse(f'Welcome, {user}')

Sessions are stored on the server-side and more secure than cookies.

 

Summary Table:

Feature	Type	Storage	Security

Cookies	Client-Side	Browser	Less Secure

Sessions	Server-Side	Server	More Secure






21 apr
Django Model Field Types and Their Attributes: 
new column cannot add after creation so it fill as null by null = true so if it required to fill data it will null the previous data 

example of a charfield in a model: 
app-folder ke andar ----models.py: -- for response fast
from django.db import  models
class UserProfile(models.Model)

from django.db import models

# Create your models here.
quali = [(1, 'B.tech'), (2, 'M.Tech')]
class UserProfile(models.Model):
    username = models.CharField(max_length = 30, null = True, unique=True, db_index=True, blank=False, help_text="Enter a unique username")
    email = models.EmailField(max_length=255, unique=True, blank=False, db_index=True)
    bio = models.CharField(max_length=50, blank=True, null=True, db_index=True, help_text="Write a short bio about yourself")
    is_activate = models.BooleanField(default = False, db_index=True)
    Qualification = models.CharField(max_length = 100, choices=quali, null=True, verbose_name='Quali', db_index=True)



model iheritance:
3 types by django: abstract model, proxy
abstract model iheritance

Multi table Model iheritance

proxy model iheritance : 
if delete, update or edit in one it effect other because both are same

models.py always exicute if anything write migrate and migrations command 

model relation one to one one to many 


25 apr 
PythonAnywhere Hoisting 
PythonAnywhere provide combine file of vercel and database so error not conflict 

07:23 ~ $ ls
README.txt  project.zip
07:33 ~ $ unzip project.zip 
Archive:  project.zip


# +++++++++++ DJANGO +++++++++++
# To use your own django app use code like this:
import os
import sys

# assuming your django settings file is at '/home/himanshubkp0/mysite/mysite/settings.py'
# and your manage.py is is at '/home/himanshubkp0/mysite/manage.py'
path = '/home/himanshubkp0/project'
if path not in sys.path:
    sys.path.append(path)

os.environ['DJANGO_SETTINGS_MODULE'] = 'project.settings'

# then:
from django.core.wsgi import get_wsgi_application
application = get_wsgi_application()

Code:
What your site is running.

Source code:
/home/himanshubkp0/project

Go to directory
Working directory:
/home/himanshubkp0/project

Go to directory
WSGI configuration file:/var/www/himanshubkp0_pythonanywhere_com_wsgi.py
Python version:
3.13

Static files:
Files that aren't dynamically generated by your code, like CSS, JavaScript or uploaded files, can be served much faster straight off the disk if you specify them here. You need to Reload your web app to activate any changes you make to the mappings below.

URL	Directory	Delete
/static/	/home/himanshubkp0/project/app/static	 
Enter URL	Enter path	
Force HTTPS: enabled

<int:pk>
<str:pk>
<slug:pk>
dfd: data flow diagram: important to make project


refrencial intigrity ko maintain karne ke liye foreign key use karte hai
primary key only one and it is roll 

one to many 



kisi bhi class ka internal behaviour change karne ke liye meta class use karte hai 
Query:
1. return multiple objects: all, filter, orderby , exclude , 
2. return single object : get 


for loop . counter 
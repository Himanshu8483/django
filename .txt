net required for pip file
asyncronous getway request(asgi), sqlparse, timezone(tzdata) 
sql is a structured query language 
pip install (django in main folder)
Successfully installed asgiref-3.8.1 django-5.1.7 sqlparse-0.5.3 tzdata-2025.1
[notice] To update, run: python.exe -m pip install --upgrade pip
./activate    always run on script directory to activate
lib->siteproject all packages
django dependent packeges( asgiref, sqlparse, tzdata) and django framework auto

step:
1. py -m venv env
2. cd env/
3. cd scripts/
4. ./activate
cd ../../
pip install django 
django-admin startproject project

24 mar:

outer folder structure (outer project): manage.py(brain or heart of django don't change anything) 
manage.py (utility tools for administrative operation)
and db.sqlite(default database : data store in tabular format) not in non tabular format(key value)
    inner project folder ( inner project folder) init, asgi, settings, wsgi, urls
relational database for memory not wasting and non relational database if increase column it will show some empty data so memory wastage
non  relational me key value data  
1 row is called 1 instance

init.py always empty file (responsible to make package this folder)
asgi.py: asyncronous server gatway interface(it takes at a time multiple request) (asyncronous): USE IN LIVE STREAMING, TRADING SITE, WEB SCHOKET, live cricket score
wsgi.py: web server gatway interface (IT TAKES AT A TIME SINGLE REQUEST) (SYNCRONIOUSLY) (eg., normal site)
(django supoports wsgi.py by-default)

python manage runcode 8000 to run django

settings.py: port enable or disable, and any risponsibility will manage 
also describe all files in simple to make notes for interview also 

25 mar 
PS D:\z_notes\django\create_project\env\Scripts> ./activate
(env) PS D:\z_notes\django\create_project\env\Scripts> cd ../../     
(env) PS D:\z_notes\django\create_project> cd .\project\
(env) PS D:\z_notes\django\create_project\project> py .\manage.py runserver

python-code             query           database 
object relational method(orm)(py manage.py makemigrations : pythoncode to query) then query to database by: py manage.py migrade
orm responsible for database show and query translate the code

server break by ctrl + C
sqlite viewer extension for sqlite in vscode
(env) PS D:\z_notes\django\create_project\project> py .\manage.py migrate

py manage.py startapp app
app/
->migrations/ : python code to query via makemigration for(name:initial0001.py)
->__init__.py
->admin.py
->app.py 
->module.py 
->tests.py 
->views.py 



**Django Project and App Management Notes**

### 1. **Folder Structure**

```
env/
project/
  |-- app/
  |-- project/
  |-- manage.py
  |-- db.sqlite3
```

**Inside App:**

- `migrations/` (Database Queries)
- `__init__.py` (Marks Directory as Package)
- `admin.py` (Admin Interface Management)
- `apps.py` (Application Configuration)
- `models.py` (Database Models)
- `tests.py` (Application Testing)
- `views.py` (Logical Application Work)

**Notes:**

- Apps are connected to the project.
- Avoid renaming generated files.

---

### 2. **Port Number Management in Django**

#### **Static Port Change:**

You can change the port statically by modifying the server run command in the following path:

```
env/lib/site-packages/django/core/management/commands/
```

1. open 40 line approx.
2. Locate the line defining the default port:
   ```python
   default_port = '8000'
   ```
3. Change it to your desired port:
   ```python
   default_port = '8080'  # Example static port
   ```
4. Save the file and run the server using:
   ```bash
   python manage.py runserver
   ```

#### **Dynamic Port Management:**

- You can specify a different port dynamically using the runserver command:

```bash
python manage.py runserver 8002
```

- This will start the server on `127.0.0.1:8002`.

---

### 3. **Basic Concepts**

- **Create Project Environment**: Virtual environment created using `venv`
- **Structure**:
  - `env/lib/site-packages` (includes Django, Core Packages)
  - Management commands with `manage.py`

---

### 4. **Dynamic Management with manage.py**

- `manage.py` runs the server on port `8000` by default or on the specified port.
- Multiple servers can run on different ports.
- Entry Point for commands: `manage.py`

**Server Concept:**

- **WSGI (Web Server Gateway Interface)**: Interface for communication between web servers and Python applications.
- Debug using `print()` in:
  - `wsgi.py`
  - `manage.py`
  - `settings.py`

**Request-Response Lifecycle:**

- Request goes through WSGI -> Project (`settings.py`) -> Application Layer (Middleware) -> Response

---

### 5. **Create a Project and App**

- **Create Project:**
  ```bash
  django-admin startproject project_name
  ```
- **Create App:**
  ```bash
  python manage.py startapp app_name
  ```

---

### 6. **Virtual Environment Management**

1. Create Environment:
   ```bash
   python -m venv env
   ```
2. Activate Environment:
   ```bash
   cd env/Scripts/
   activate
   ```
3. Install Django:
   ```bash
   pip install django
   ```

---

### 7. **Run Server**

- Start Server:
  ```bash
  python manage.py runserver
  ```
- Check Port (Default: 127.0.0.1:8000)
- If Red Color Error -> Port Conflict

---

### 8. **Database Management**

- Migrate Changes:
  ```bash
  python manage.py migrate
  ```
- Make Migrations (Reflect App in DB):
  ```bash
  python manage.py makemigrations app_name
  ```

---

### 9. **Interview Preparation Questions**

- Explain the Django Project Structure.
- What is the purpose of `manage.py`?
- How does WSGI work in Django?
- Describe the request-response lifecycle.
- How to create and manage virtual environments?
- How to troubleshoot server port conflicts?
- Explain migrations and their role in Django.
- How to connect an app to a project in Django?
- What are the uses of `views.py`, `models.py`, and `admin.py`?
- How can you customize the Django admin interface?
- How to debug issues using print statements in Django?







PS D:\z_notes\django\landing_page> py -m venv env
PS D:\z_notes\django\landing_page> cd .\env\    
PS D:\z_notes\django\landing_page\env> cd .\Scripts\
PS D:\z_notes\django\landing_page\env\Scripts> ./activate
(env) PS D:\z_notes\django\landing_page\env\Scripts> cd ../../
(env) PS D:\z_notes\django\landing_page> pip install django
Collecting django
  Using cached Django-5.1.7-py3-none-any.whl.metadata (4.1 kB)
Collecting asgiref<4,>=3.8.1 (from django)
  Using cached asgiref-3.8.1-py3-none-any.whl.metadata (9.3 kB)
Collecting sqlparse>=0.3.1 (from django)
  Using cached sqlparse-0.5.3-py3-none-any.whl.metadata (3.9 kB)
Collecting tzdata (from django)
  Using cached tzdata-2025.2-py2.py3-none-any.whl.metadata (1.4 kB)
Using cached Django-5.1.7-py3-none-any.whl (8.3 MB)
Using cached asgiref-3.8.1-py3-none-any.whl (23 kB)
Using cached sqlparse-0.5.3-py3-none-any.whl (44 kB)
Using cached tzdata-2025.2-py2.py3-none-any.whl (347 kB)
Installing collected packages: tzdata, sqlparse, asgiref, django
Successfully installed asgiref-3.8.1 django-5.1.7 sqlparse-0.5.3 tzdata-2025.2

[notice] A new release of pip is available: 24.3.1 -> 25.0.1
[notice] To update, run: python.exe -m pip install --upgrade pip
(env) PS D:\z_notes\django\landing_page> django-admin startproject project
(env) PS D:\z_notes\django\landing_page> cd project
(env) PS D:\z_notes\django\landing_page\project> py manage.py startapp app
(env) PS D:\z_notes\django\landing_page\project> 

incript method , 

29 mar:
response :
render()
redirect()
{ inbuilt: from django.shortcut iport render, redirect}
httpresponse()
jsonresponse()
{from django.http import httpresponse, jsonResponse}

render()-> url to normal_page(.html)
redirect()-> url to url 
httpresponse()-> text content 
jsonResponse()-> json data as a response 

views.py heavy se rokne ke liye alag alag karte hai
logics can be perform in views.py 

difference to find python_dict and json_data:
dict:
''/""/"""/single, double or triple 
True/False
None
data type: (dict)
eg: data= {'name': True, 'age':False, 'quali':None}


in json: "double only
true/false 
null
b'' data type
eg: {"name": true, "age": false, "quali": null}
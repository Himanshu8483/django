Django Basic Notes

Django Overview

• Python framework for web development.

• Follows MVT (Model-View-Template) pattern.

• Default database: SQLite3.

• Supports MySQL and PostgreSQL.

• Default port: 8000.

MVT Pattern

• Model: Handles database.

• View: Contains logic.

• Template: Manages frontend (using DTL).

Databases

• SQLite3 (default) for development.

• Supports MySQL, PostgreSQL, Oracle.

• Configure in settings.py using database credentials.

Microservices

• Flask: Lightweight, for small applications.

• FastAPI: Fast and asynchronous API development.

• CherryPy: Minimalistic web framework.

MVT vs MVC

• MVT (Model-View-Template) - Django follows this pattern. 

o Model: Handles database (data storage).

o View: Contains logic to process data.

o Template: Displays the data using HTML.

• MVC (Model-View-Controller) - Used in other frameworks like Flask. 

o Model: Manages data and database.

o View: Displays data using UI.

o Controller: Handles user input and business logic.

In Django, the Controller part is handled by the framework itself (Django’s built-in functions).

Django ORM vs SQL

• Django ORM (Object Relational Mapping)

o Python-based way to interact with the database.

o Example: 

User.objects.create(name='John', age=25)

• SQL (Structured Query Language)

o Direct query to the database.

o Example: 

INSERT INTO User (name, age) VALUES ('John', 25);

ORM is easier to write, maintain, and reduces errors compared to raw SQL.
Django vs Flask vs FastAPI

• Django: Best for large projects with pre-built features (Admin Panel, ORM).

• Flask: Lightweight and flexible, ideal for small projects or APIs.

• FastAPI: Best for real-time applications with excellent API support and speed.

Virtual Environment Setup (Python)

A virtual environment is a self-contained directory that contains Python installations and 

packages, allowing you to manage dependencies for different projects.

Commands to Create and Activate Virtual Environment

1. Create Virtual Environment

py -m venv env

o py → Runs Python

o -m venv → Module to create a virtual environment

o env → Environment folder name

2. Navigate to Environment Folder

cd env

cd Scripts

3. Activate Virtual Environment

./activate

o (env) → Indicates the virtual environment is active.

Fixing Execution Policy Issues

If you face issues activating the environment due to restricted execution policies:

1. Check Execution Policy (in Windows PowerShell run as Administrator)

get-executionpolicy

o It may show Restricted.

2. Change Execution Policy (Run as Administrator in Windows PowerShell)

set-executionpolicy unrestricted

o Choose Y to confirm.

Folder Structure of Virtual Environment

• env/ → Root folder for environment 

o Include/ → C/C++ packages

o Lib/ → Python packages

o Scripts/ → Executable files (activate)

o pyvenv.cfg → Configuration file

Interview Tips - Common Questions

1. What is a Python virtual environment?

o A virtual environment is a self-contained Python setup for project-specific 

dependencies.

2. Why use a virtual environment instead of installing globally?

o It prevents package conflicts, ensures project isolation, and avoids system-level 

changes.
Django Project Setup and Notes

Prerequisites 

 Python and Pip (Python's package manager) must be installed.

Required Packages

• asgiref: For asynchronous support (ASGI - Asynchronous Server Gateway Interface)

• sqlparse: For SQL query parsing

• tzdata: Provides timezone data

• Django: The main framework for web development

Installation Steps

Create a Virtual Environment

py -m venv env

Activate the Virtual Environment

.\env\Scripts\

./activate

cd ../../

Install Django (in Main Folder)

pip install django

Verify Installation

django-admin --version

Create a Django Project

Start a New Project

django-admin startproject project_name

Navigate to the Project Directory

cd project_name

How to Run Django

• Use the following command to run the server on port 8000:

python manage.py runserver

• Access the project at http://127.0.0.1:8000.

• Ctrl + C to stop the server.

Directory Structure After Creation project_name 

project_name/ (Outer Project)

│

├── manage.py # Command-line utility for managing the project
├── project_name/ # Project settings and configurations

│ ├── __init__.py # Marks this directory as a Python package

│ ├── asgi.py # Entry point for ASGI applications

│ ├── settings.py # Project settings

│ ├── urls.py # URL routing

│ ├── wsgi.py # Entry point for WSGI applications

├── db.sqlite3 # Default Database

Additional Notes

• cd ../ → Move to the previous directory

• cd ./ → Remain in the current directory

• Dependencies like asgiref, sqlparse, and tzdata are installed automatically with Django.

Managing Virtual Environment

• Always run .\activate from the Scripts directory to activate the virtual environment.

• All installed packages are available in lib\site-packages.

Update Pip (optional)

python.exe -m pip install --upgrade pip

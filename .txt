Based on your whiteboard diagrams and uploaded photos, you're working on a Django-based admin-user panel with the following features:

---

## üîê Features from Diagrams

### ‚úÖ Login Functionality

* Login form with email and password.
* Hardcoded login for admin (`admin@gmail.com`, `admin@123`).
* Redirect to:

  * `admin_dashboard.html` if admin
  * `student_dashboard.html` if user

### üßæ Admin Dashboard

* Page: `admin_dashboard.html`
* Options:

  * Add new student
  * Show all queries
  * Logout

### üßæ Student Dashboard

* Page: `student_dashboard.html`
* Options:

  * New query
  * All queries
  * Profile
  * Logout

### üß† Mentioned Concepts

* Cookies
* Sessions
* `@objects` (likely for Django ORM operations)
* `Search` functionality (probably for queries)

---

## ‚úÖ Complete Django Project Code

### 1. `urls.py`

```python
from django.urls import path
from . import views

urlpatterns = [
    path('', views.login_view, name='login'),
    path('admin_dashboard/', views.admin_dashboard, name='admin_dashboard'),
    path('student_dashboard/', views.student_dashboard, name='student_dashboard'),
    path('logout/', views.logout_view, name='logout'),
]
```

---

### 2. `views.py`

```python
from django.shortcuts import render, redirect

def login_view(request):
    if request.method == 'POST':
        email = request.POST.get('email')
        password = request.POST.get('password')

        # Hardcoded Admin Login
        if email == 'admin@gmail.com' and password == 'admin@123':
            request.session['user'] = 'admin'
            return redirect('admin_dashboard')

        # Hardcoded Student Login
        elif email == 'student@gmail.com' and password == 'student@123':
            request.session['user'] = 'student'
            return redirect('student_dashboard')

        else:
            return render(request, 'login.html', {'error': 'Invalid credentials'})

    return render(request, 'login.html')


def admin_dashboard(request):
    if request.session.get('user') != 'admin':
        return redirect('login')
    return render(request, 'admin_dashboard.html')


def student_dashboard(request):
    if request.session.get('user') != 'student':
        return redirect('login')
    return render(request, 'student_dashboard.html')


def logout_view(request):
    request.session.flush()
    return redirect('login')
```

---

### 3. `login.html`

```html
<!DOCTYPE html>
<html>
<head>
    <title>Login</title>
</head>
<body>
    <h2>Login Page</h2>
    {% if error %}
        <p style="color:red">{{ error }}</p>
    {% endif %}
    <form method="POST">
        {% csrf_token %}
        Email: <input type="email" name="email" required><br><br>
        Password: <input type="password" name="password" required><br><br>
        <button type="submit">Login</button>
    </form>
</body>
</html>
```

---

### 4. `admin_dashboard.html`

```html
<!DOCTYPE html>
<html>
<head>
    <title>Admin Dashboard</title>
</head>
<body>
    <h2>Admin Panel</h2>
    <p>Welcome Admin!</p>
    <ul>
        <li><a href="#">Add New Student</a></li>
        <li><a href="#">Show All Queries</a></li>
        <li><a href="{% url 'logout' %}">Logout</a></li>
    </ul>
</body>
</html>
```

---

### 5. `student_dashboard.html`

```html
<!DOCTYPE html>
<html>
<head>
    <title>Student Dashboard</title>
</head>
<body>
    <h2>Student Panel</h2>
    <p>Welcome Student!</p>
    <ul>
        <li><a href="#">New Query</a></li>
        <li><a href="#">All Queries</a></li>
        <li><a href="#">Profile</a></li>
        <li><a href="{% url 'logout' %}">Logout</a></li>
    </ul>
</body>
</html>
```

---

## ‚úÖ Notes:

* You can later add models for queries and students.
* You can use Django sessions for storing user roles securely.
* Replace hardcoded email-password with database authentication using `User` model later.

---

Would you like me to add:

* **Models for query and student?**
* **Forms for login and query submission?**
* **Search and filter queries using ORM?**

Let me know and I‚Äôll add them too!

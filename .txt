Django Basic Notes

Django Overview

• Python framework for web development.

• Follows MVT (Model-View-Template) pattern.

• Default database: SQLite3.

• Supports MySQL and PostgreSQL.

• Default port: 8000.

MVT Pattern

• Model: Handles database.

• View: Contains logic.

• Template: Manages frontend (using DTL).

Databases

• SQLite3 (default) for development.

• Supports MySQL, PostgreSQL, Oracle.

• Configure in settings.py using database credentials.

Microservices

• Flask: Lightweight, for small applications.

• FastAPI: Fast and asynchronous API development.

• CherryPy: Minimalistic web framework.

MVT vs MVC

• MVT (Model-View-Template) - Django follows this pattern. 

o Model: Handles database (data storage).

o View: Contains logic to process data.

o Template: Displays the data using HTML.

• MVC (Model-View-Controller) - Used in other frameworks like Flask. 

o Model: Manages data and database.

o View: Displays data using UI.

o Controller: Handles user input and business logic.

In Django, the Controller part is handled by the framework itself (Django’s built-in functions).

Django ORM vs SQL

• Django ORM (Object Relational Mapping)

o Python-based way to interact with the database.

o Example: 

User.objects.create(name='John', age=25)

• SQL (Structured Query Language)

o Direct query to the database.

o Example: 

INSERT INTO User (name, age) VALUES ('John', 25);

ORM is easier to write, maintain, and reduces errors compared to raw SQL.
Django vs Flask vs FastAPI

• Django: Best for large projects with pre-built features (Admin Panel, ORM).

• Flask: Lightweight and flexible, ideal for small projects or APIs.

• FastAPI: Best for real-time applications with excellent API support and speed.

Virtual Environment Setup (Python)

A virtual environment is a self-contained directory that contains Python installations and 

packages, allowing you to manage dependencies for different projects.

Commands to Create and Activate Virtual Environment

1. Create Virtual Environment

py -m venv env

o py → Runs Python

o -m venv → Module to create a virtual environment

o env → Environment folder name

2. Navigate to Environment Folder

cd env

cd Scripts

3. Activate Virtual Environment

./activate

o (env) → Indicates the virtual environment is active.

Fixing Execution Policy Issues

If you face issues activating the environment due to restricted execution policies:

1. Check Execution Policy (in Windows PowerShell run as Administrator)

get-executionpolicy

o It may show Restricted.

2. Change Execution Policy (Run as Administrator in Windows PowerShell)

set-executionpolicy unrestricted

o Choose Y to confirm.

Folder Structure of Virtual Environment

• env/ → Root folder for environment 

o Include/ → C/C++ packages

o Lib/ → Python packages

o Scripts/ → Executable files (activate)

o pyvenv.cfg → Configuration file

Interview Tips - Common Questions

1. What is a Python virtual environment?

o A virtual environment is a self-contained Python setup for project-specific 

dependencies.

2. Why use a virtual environment instead of installing globally?

o It prevents package conflicts, ensures project isolation, and avoids system-level 

changes.
Django Project Setup and Notes

Prerequisites 

 Python and Pip (Python's package manager) must be installed.

Required Packages

• asgiref: For asynchronous support (ASGI - Asynchronous Server Gateway Interface)

• sqlparse: For SQL query parsing

• tzdata: Provides timezone data

• Django: The main framework for web development

Installation Steps

Create a Virtual Environment

py -m venv env

Activate the Virtual Environment

.\env\Scripts\

./activate

cd ../../

Install Django (in Main Folder)

pip install django

Verify Installation

django-admin --version

Create a Django Project

Start a New Project

django-admin startproject project_name

Navigate to the Project Directory

cd project_name

How to Run Django

• Use the following command to run the server on port 8000:

python manage.py runserver

• Access the project at http://127.0.0.1:8000.

• Ctrl + C to stop the server.

Directory Structure After Creation project_name 

project_name/ (Outer Project)

│

├── manage.py # Command-line utility for managing the project
├── project_name/ # Project settings and configurations

│ ├── __init__.py # Marks this directory as a Python package

│ ├── asgi.py # Entry point for ASGI applications

│ ├── settings.py # Project settings

│ ├── urls.py # URL routing

│ ├── wsgi.py # Entry point for WSGI applications

├── db.sqlite3 # Default Database

Additional Notes

• cd ../ → Move to the previous directory

• cd ./ → Remain in the current directory

• Dependencies like asgiref, sqlparse, and tzdata are installed automatically with Django.

Managing Virtual Environment

• Always run .\activate from the Scripts directory to activate the virtual environment.

• All installed packages are available in lib\site-packages.

Update Pip (optional)

python.exe -m pip install --upgrade pip
Django Project Structure - Interview Notes

Outer Project Structure

•	manage.py

o	Acts as the heart or brain of a Django project.

o	Used as a utility tool for administrative operations (e.g., running the server, migrations).

o	Do not modify it.

•	db.sqlite3 (Default Database)

o	SQLite is the default relational database in Django.

o	Data is stored in a tabular format (rows and columns).

o	Relational Database: Prevents memory wastage by storing structured data efficiently.

o	Non-Relational Database: Uses key-value pair storage (e.g., NoSQL), leading to memory wastage if columns are added without data.

o	Row: Referred to as an Instance in Django ORM.

 

Inner Project Folder

Contains essential files and configurations to manage the application.

•	__init__.py

o	An empty file that makes the directory a Python package.

•	asgi.py (Asynchronous Server Gateway Interface)

o	Handles multiple requests at a time (asynchronous).

o	Suitable for real-time applications like: 

Live Streaming, Trading Platforms, WebSockets, Live Cricket Score Updates.

•	wsgi.py (Web Server Gateway Interface)

o	Handles single requests at a time (synchronously).

o	Suitable for normal websites and applications.

o	Django supports WSGI by default.

•	settings.py

o	The core configuration file for the project.

o	Manages: 

	Port management

	Application settings

	Database configurations

	Middleware and Installed Apps

•	urls.py

o	Handles URL routing.

o	Maps URLs to views.

 

Django Project Essentials – Quick Notes

📂 File Location: settings.py

📌 BASE_DIR

•	BASE_DIR represents the root directory of your Django project.

•	It helps in defining paths for templates, static files, database, and more.

⚡ Secret Key

•	SECRET_KEY = 'django-insecure-79zs...'

•	Used for encryption (cookies, CSRF tokens, sessions).

•	❌ Never expose in production! Use .env file or environment variables.

🐞 Debug Mode

•	DEBUG = True → Shows detailed errors (for development).

•	DEBUG = False → Hides errors in production (for security).

🌐 Allowed Hosts

•	ALLOWED_HOSTS = [] → Defines which domains can access the app.

•	Example for production: ['example.com', 'www.example.com'].

 

📂 File Location: settings.py

📦 Installed Apps

•	INSTALLED_APPS → Lists all built-in and custom Django apps.

•	Example:

python

CopyEdit

INSTALLED_APPS = [

    'django.contrib.admin',   # Admin Panel

    'django.contrib.auth',    # Authentication System

    'myapp',                  # Custom App

]

🧱 Middleware

•	Middleware processes requests before they reach views.

•	Example: CsrfViewMiddleware (prevents CSRF attacks).

 

📂 File Location: project/urls.py

📌 Root URL Configuration

•	ROOT_URLCONF = 'project.urls' → Points to the main urls.py.

•	Example URL mapping:

python

CopyEdit

from django.urls import path

from myapp import views



urlpatterns = [

    path('', views.home, name='home'),

    path('about/', views.about, name='about'),

]

 

📂 File Location: settings.py

🎭 Templates

•	Stores HTML files for rendering the frontend.

•	Example configuration:

python

CopyEdit

TEMPLATES = [

    {

        'BACKEND': 'django.template.backends.django.DjangoTemplates',

        'DIRS': ['templates'],  # Custom templates directory

        'APP_DIRS': True,

    },

]

 

📂 File Location: wsgi.py & asgi.py

🖥️ WSGI Application

•	wsgi.py → Used for deploying Django apps with WSGI servers (Gunicorn, uWSGI).

⚡ ASGI Application

•	asgi.py → Supports real-time features (WebSockets, chat, live updates).

 

📂 File Location: settings.py

🗄️ Database Configuration

•	Default: SQLite (db.sqlite3).

•	Can switch to PostgreSQL, MySQL, etc.

python

CopyEdit

DATABASES = {

    'default': {

        'ENGINE': 'django.db.backends.sqlite3',

        'NAME': BASE_DIR / 'db.sqlite3',

    }

}

🔒 Password Validators

•	Ensures strong passwords (length, no common words, complexity).

🌍 Internationalization & Time Zone

•	LANGUAGE_CODE = 'en-us', TIME_ZONE = 'UTC'.

🖼️ Static Files

•	STATIC_URL = 'static/' → Stores CSS, JS, and images.

🆔 Default Primary Key Field

•	DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField' → Default primary key type.

 

📂 File Location: manage.py

🧑‍💻 manage.py

•	Runs Django commands like:

bash

CopyEdit

python manage.py runserver      # Start server

python manage.py migrate        # Apply database migrations

python manage.py startapp myapp # Create a new app

 

Final Revision Summary

✔ manage.py → Runs Django commands.

✔ wsgi.py → Deploys app with WSGI.

✔ asgi.py → Supports real-time features.

✔ urls.py → Handles URL routing.

✔ settings.py → Configures database, security, static files, and middleware.

💡 Tip: Set DEBUG = False in production for security. 🚀

 

✅ Summary for Revision

o	BASE_DIR: Project path management.

o	SECRET_KEY: Used for security, keep it private.

o	DEBUG: Enables detailed error reports in development.

o	ALLOWED_HOSTS: Controls which domains can access your site.

o	INSTALLED_APPS: Pre-installed and custom apps.

o	MIDDLEWARE: Security and functionality management.

o	ROOT_URLCONF: Directs to URL routing file.

o	TEMPLATES: Manages HTML templates for frontend.

o	WSGI_APPLICATION: Interface for deploying the app.

o	DATABASES: Configures database using SQLite by default.

o	AUTH_PASSWORD_VALIDATORS: Ensures strong passwords.

o	LANGUAGE_CODE & TIME_ZONE: Controls language and time settings.

o	STATIC_URL: Path for serving static files.

Django Project and App Structure Notes

Creating an App

Start a New App:

python manage.py startapp app_name

App Structure:

app_name/

├── __init__.py

├── admin.py        # Manage data via Admin Panel

├── apps.py         # App configuration

├── migrations/     # Tracks database changes

├── models.py       # Database Models (ORM)

├── tests.py        # Testing application

├── views.py        # Logic for handling requests

Explanation:

admin.py → Register models to view in Admin Panel.

apps.py → Configures app settings.

migrations/ → Contains files that record model changes (e.g., 0001_initial.py).

models.py → Define database tables using ORM.

tests.py → Write unit tests.

views.py → Contains functions or class-based views for request handling.

 

Migrations

ORM (Object-Relational Mapping)

Converts Python code (models) into SQL queries.

Communicates with the database using Python objects.

Steps for Migrations:

Create Migrations:

python manage.py makemigrations

Converts models to SQL queries.

Apply Migrations:

python manage.py migrate

Applies the SQL queries to the database.

Example Workflow:

python manage.py makemigrations   # Generate migration files

python manage.py migrate           # Apply migrations to database

Tip: Use SQLite Viewer Extension in VS Code to view database content.

 

Importing and Using

In Admin Panel

First, register the model in admin.py:

from django.contrib import admin

from .models import ModelName



admin.site.register(ModelName)

Then run:

python manage.py createsuperuser

python manage.py runserver

Access the Admin Panel at http://127.0.0.1:8000/admin

In Views

Example function in views.py:

from django.http import HttpResponse



def home(request):

    return HttpResponse("Hello, Django!")

Add it to urls.py:

from django.urls import path

from .views import home



urlpatterns = [

    path('', home),

]

 

Quick Summary for Interview Prep:

Command	Description

python manage.py startproject project_name	Create a new Django project

python manage.py startapp app_name	Create a new app within the project

python manage.py runserver	Run the development server

python manage.py makemigrations	Convert model changes into SQL queries

python manage.py migrate	Apply SQL queries to the database

python manage.py createsuperuser	Create an admin user

python manage.py shell	Open an interactive Python shell with project settings loaded

 

Port Number Management in Django

Static Port Change:

You can change the port statically by modifying the server run command in the following path:

env/lib/site-packages/django/core/management/commands/

1.	open 40 line approx.

2.	Locate the line defining the default port:

3.	default_port = '8000'

4.	Change it to your desired port:

5.	default_port = '8080'  # Example static port

6.	Save the file and run the server using:

7.	python manage.py runserver

Dynamic Port Management:

•	You can specify a different port dynamically using the runserver command:

python manage.py runserver 8002

•	This will start the server on 127.0.0.1:8002.

 

Basic Concepts

•	Create Project Environment: Virtual environment created using venv

•	Structure:

o	env/lib/site-packages (includes Django, Core Packages)

o	Management commands with manage.py

 

Dynamic Management with manage.py

•	manage.py runs the server on port 8000 by default or on the specified port.

•	Multiple servers can run on different ports.

•	Entry Point for commands: manage.py

Server Concept:

•	WSGI (Web Server Gateway Interface): Interface for communication between web servers and Python applications.

•	Debug using print() in:

o	wsgi.py

o	manage.py

o	settings.py

 

Create a Project and App

•	Create Project:

•	django-admin startproject project_name

•	Create App:

•	python manage.py startapp app_name

 

 Virtual Environment Management

1.	Create Environment:

2.	python -m venv env

3.	Activate Environment:

4.	cd env/Scripts/

5.	activate

6.	Install Django:

7.	pip install django

 

Run Server

•	Start Server:

•	python manage.py runserver

•	Check Port (Default: 127.0.0.1:8000)

•	If Red Color Error -> Port Conflict

 

Database Management

•	Migrate Changes:

•	python manage.py migrate

•	Make Migrations (Reflect App in DB):

•	python manage.py makemigrations app_name







